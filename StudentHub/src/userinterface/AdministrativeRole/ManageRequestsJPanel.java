/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AdministrativeRole;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.Enterprise;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.WorkRequest;
import Business.utilities.tableHeaderColors;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author siddheshsawant
 */
public class ManageRequestsJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageRequestsJPanel
     */
    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Enterprise enterprise;

    public ManageRequestsJPanel(JPanel userProcessContainer, Enterprise enterprise, UserAccount account, Organization organization, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.enterprise = enterprise;
        workRequestJTable.getTableHeader().setDefaultRenderer(new tableHeaderColors());

        populateOrganization();
    }

    private void populateOrganization() {

        orgComboBox.removeAllItems();

        employeeComboBox.removeAllItems();

        for (Organization organization : enterprise.getOrganizationDirectory().getOrganizationList()) {
            orgComboBox.addItem(organization.toString());
        }

    }

    public void populateTable() {
        DefaultTableModel model = (DefaultTableModel) workRequestJTable.getModel();

        model.setRowCount(0);
        String o = orgComboBox.getSelectedItem().toString();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getName().equals(o)) {
                for (WorkRequest request : org.getWorkQueue().getWorkRequestList()) {
                    Object[] row = new Object[4];

                    row[0] = request.getSender().getStudent().getName();
                    row[1] = request.getReceiver() == null ? null : request.getReceiver().getEmployee().getName();
                    row[2] = request;
                    row[3] = request.getStatus();

                    model.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        orgComboBox = new javax.swing.JComboBox();
        employeeComboBox = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        AssignButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestJTable = new javax.swing.JTable();
        BackButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        enterpriseLabel = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText("Organization:");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 150, -1, -1));

        orgComboBox.setBackground(new java.awt.Color(204, 204, 204));
        orgComboBox.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        orgComboBox.setForeground(new java.awt.Color(51, 51, 51));
        orgComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        orgComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                orgComboBoxActionPerformed(evt);
            }
        });
        orgComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                orgComboBoxPropertyChange(evt);
            }
        });
        add(orgComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 140, 190, 30));

        employeeComboBox.setBackground(new java.awt.Color(204, 204, 204));
        employeeComboBox.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        employeeComboBox.setForeground(new java.awt.Color(51, 51, 51));
        employeeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        add(employeeComboBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 345, 190, 30));

        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(204, 204, 204));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("Assign Selected Task to:");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(240, 353, 172, -1));

        AssignButton.setBackground(new java.awt.Color(51, 153, 255));
        AssignButton.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        AssignButton.setForeground(new java.awt.Color(255, 255, 255));
        AssignButton.setText("Assign");
        AssignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AssignButtonActionPerformed(evt);
            }
        });
        add(AssignButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(389, 417, 93, 42));

        workRequestJTable.setBackground(new java.awt.Color(204, 204, 204));
        workRequestJTable.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        workRequestJTable.setForeground(new java.awt.Color(51, 51, 51));
        workRequestJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Sender", "Receiver", "Goal", "Status"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestJTable);
        if (workRequestJTable.getColumnModel().getColumnCount() > 0) {
            workRequestJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 216, 653, 100));

        BackButton.setBackground(new java.awt.Color(255, 51, 51));
        BackButton.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
        BackButton.setForeground(new java.awt.Color(51, 51, 51));
        BackButton.setText("<< Back");
        BackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackButtonActionPerformed(evt);
            }
        });
        add(BackButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, 30));

        SearchButton.setBackground(new java.awt.Color(51, 153, 255));
        SearchButton.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
        SearchButton.setForeground(new java.awt.Color(255, 255, 255));
        SearchButton.setText("Search");
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        add(SearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 150, -1, -1));

        enterpriseLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        enterpriseLabel.setForeground(new java.awt.Color(51, 204, 255));
        enterpriseLabel.setText("Manage Requests");
        add(enterpriseLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 90, 220, 30));

        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/images/backgroundLogo.png"))); // NOI18N
        add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 50, 110, 100));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userinterface/images/backgroundFoot.png"))); // NOI18N
        add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 264, 52));
    }// </editor-fold>//GEN-END:initComponents

    private void AssignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AssignButtonActionPerformed
        // TODO add your handling code here:
        int selectedRow = workRequestJTable.getSelectedRow();
        if (selectedRow >= 0) {
            WorkRequest request = (WorkRequest) workRequestJTable.getValueAt(selectedRow, 2);
            if (!request.getStatus().equals("Assigned") && !request.getStatus().equals("Result Posted")) {
                for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                    for (UserAccount user : org.getUserAccountDirectory().getUserAccountList()) {
                        if (employeeComboBox.getSelectedItem().equals(user.getEmployee().getName())) {

                            int x = user.getWorkQueue().getWorkRequestList().size();
                            if (x > 0) {
                                WorkRequest r = user.getWorkQueue().getWorkRequestList().get(x - 1);
                                String st = r.getStatus();
                                if (st.equals("Assigned")) {
                                    JOptionPane.showMessageDialog(null, "Asignee already has a request in open status!", "Error", JOptionPane.ERROR_MESSAGE);
                                    return;
                                } else {
                                    request.setReceiver(user);
                                    //request.setStatus("Assigned to " + employeeComboBox.getSelectedItem());
                                    request.setStatus("Assigned");
                                    JOptionPane.showMessageDialog(null, "Request has been Assigned Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                                    user.getWorkQueue().getWorkRequestList().add(request);
                                }
                            } else {
                                request.setReceiver(user);
                                //request.setStatus("Assigned to " + employeeComboBox.getSelectedItem());
                                request.setStatus("Assigned");
                                JOptionPane.showMessageDialog(null, "Request has been Assigned Successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                                user.getWorkQueue().getWorkRequestList().add(request);
                            }
                        }
                    }
                }
                populateTable();
            } else {
                if (request.getStatus().equals("Assigned")) {
                    JOptionPane.showMessageDialog(null, "Request has been assigned Already!", "Alert", JOptionPane.INFORMATION_MESSAGE);
                } else if (request.getStatus().equals("Result Posted")) {
                    JOptionPane.showMessageDialog(null, "Request has been Posted Already!", "Alert", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a row", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_AssignButtonActionPerformed

    private void orgComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_orgComboBoxActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_orgComboBoxActionPerformed

    private void BackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackButtonActionPerformed

        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_BackButtonActionPerformed

    private void orgComboBoxPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_orgComboBoxPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_orgComboBoxPropertyChange

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        employeeComboBox.removeAllItems();
        String organization = orgComboBox.getSelectedItem().toString();
        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
            if (org.getName().equals(organization)) {

                for (Employee emp : org.getEmployeeDirectory().getEmployeeList()) {
                    employeeComboBox.addItem(emp.getName());
                }

            }
            populateTable();
        }
    }//GEN-LAST:event_SearchButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AssignButton;
    private javax.swing.JButton BackButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JComboBox<String> employeeComboBox;
    private javax.swing.JLabel enterpriseLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox orgComboBox;
    private javax.swing.JTable workRequestJTable;
    // End of variables declaration//GEN-END:variables

}
